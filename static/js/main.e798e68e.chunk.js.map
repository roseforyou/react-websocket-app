{"version":3,"sources":["components/commonInput.js","components/msgButton.js","components/actionButton.js","App.js","serviceWorker.js","index.js"],"names":["CommonInput","props","inputChange","bind","e","this","onInputChange","target","value","label","className","type","placeholder","disabled","onChange","React","Component","MsgButton","setMessage","receiveMsg","btnClass","onClick","ActionButton","clickEvent","action","isLoading","pointerEvent","style","text","App","componentWillUnmount","setState","state","callback","inputChangeHandle","receiveMsgHandle","connect","disconnect","componentDidMount","clearLogs","socketHandle","sendMsg","addLog","ws","token","roomID","WSURL","message","logs","connectBtnDisabled","disconnectBtnDisabled","sendBtnDisabled","connectIsLoading","disconnectIsLoading","localStorage","getItem","buttonsStatus","setItem","onopen","onclose","onmessage","event","data","onerror","WebSocket","close","msg","txt","trim","send","rows","readOnly","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e798e68e.chunk.js","sourcesContent":["import React from 'react';\n\nclass CommonInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.inputChange = this.inputChange.bind(this);\n  }\n\n  inputChange(e) {\n    this.props.onInputChange(e.target.value, this.props.label);\n  }\n\n  render() {\n    return (\n      <div className=\"field\">\n        <label className=\"label\">{this.props.label}:</label>\n        <div className=\"control\">\n          <input\n            className=\"input\"\n            type=\"text\"\n            placeholder={this.props.placeholder}\n            value={this.props.value}\n            disabled={this.props.disabled || false}\n            onChange={this.inputChange}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CommonInput;\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\n\nclass MsgButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.setMessage = this.setMessage.bind(this);\n  }\n\n  setMessage() {\n    this.props.receiveMsg(this.props.value);\n  }\n\n  render() {\n    return (\n      <div className=\"control\">\n        <a className={`button quick-input ${this.props.btnClass}`} onClick={this.setMessage}>\n          {this.props.value}\n        </a>\n      </div>\n    );\n  }\n}\n\nexport default MsgButton;\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\n\nclass ActionButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.clickEvent = this.clickEvent.bind(this);\n  }\n\n  clickEvent() {\n    if (!this.props.disabled) {\n      this.props.action();\n    }\n  }\n\n  render() {\n    this.btnClass = this.props.btnClass ? ` ${this.props.btnClass}` : '';\n    this.isLoading = this.props.isLoading ? ` is-loading` : '';\n\n    this.pointerEvent = this.props.isLoading\n      ? {\n          pointerEvent: 'none',\n        }\n      : {\n          pointerEvent: 'auto',\n        };\n    return (\n      <div className=\"control\">\n        <a\n          className={`button${this.btnClass}${this.isLoading}`}\n          disabled={this.props.disabled}\n          onClick={this.clickEvent}\n          style={this.pointerEvent}\n        >\n          {this.props.text}\n        </a>\n      </div>\n    );\n  }\n}\n\nexport default ActionButton;\n","import 'bulma/css/bulma.css';\nimport React from 'react';\nimport CommonInput from './components/commonInput';\nimport MsgButton from './components/msgButton';\nimport ActionButton from './components/actionButton';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.inputChangeHandle = this.inputChangeHandle.bind(this);\n    this.receiveMsgHandle = this.receiveMsgHandle.bind(this);\n    this.connect = this.connect.bind(this);\n    this.disconnect = this.disconnect.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.clearLogs = this.clearLogs.bind(this);\n    this.socketHandle = this.socketHandle.bind(this);\n    this.sendMsg = this.sendMsg.bind(this);\n    this.addLog = this.addLog.bind(this);\n\n    this.ws = null;\n\n    this.state = {\n      token: '',\n      roomID: '',\n      WSURL: '',\n      message: '',\n      logs: '',\n      connectBtnDisabled: true,\n      disconnectBtnDisabled: true,\n      sendBtnDisabled: true,\n      connectIsLoading: false,\n      disconnectIsLoading: false,\n    };\n  }\n\n  componentDidMount() {\n    if (localStorage.getItem('wsToken')) {\n      this.inputChangeHandle(localStorage.getItem('wsToken'), 'Token');\n    }\n\n    if (localStorage.getItem('wsRoomID')) {\n      this.inputChangeHandle(localStorage.getItem('wsRoomID'), 'RoomID');\n    }\n\n    if (localStorage.getItem('wsWSURL')) {\n      this.inputChangeHandle(localStorage.getItem('wsWSURL'), 'WSURL');\n    }\n  }\n\n  componentWillUnmount = () => {\n    this.setState = (state, callback) => {\n      return;\n    };\n  };\n\n  buttonsStatus() {\n    if (this.state.disconnectBtnDisabled && this.state.WSURL) {\n      this.setState({ connectBtnDisabled: false });\n    } else {\n      this.setState({ connectBtnDisabled: true });\n    }\n  }\n\n  inputChangeHandle(value, label) {\n    if (label === 'Token') {\n      this.setState({ token: value }, () => {\n        this.buttonsStatus();\n        localStorage.setItem('wsToken', this.state.token);\n      });\n    } else if (label === 'RoomID') {\n      this.setState({ roomID: value }, () => {\n        this.buttonsStatus();\n        localStorage.setItem('wsRoomID', this.state.roomID);\n      });\n    } else if (label === 'Message') {\n      this.setState({\n        message: value,\n        sendBtnDisabled: !(value && !this.state.disconnectBtnDisabled),\n      });\n    } else if (label === 'WSURL') {\n      this.setState({ WSURL: value }, () => {\n        this.buttonsStatus();\n        localStorage.setItem('wsWSURL', this.state.WSURL);\n      });\n    }\n  }\n\n  receiveMsgHandle(message) {\n    this.inputChangeHandle(message, 'Message');\n  }\n\n  socketHandle() {\n    this.ws.onopen = () => {\n      this.sendMsg(`I'm coming!`);\n      this.setState({\n        connectBtnDisabled: true,\n        disconnectBtnDisabled: false,\n        sendBtnDisabled: false,\n        connectIsLoading: false,\n      });\n    };\n    this.ws.onclose = () => {\n      this.addLog('DISCONNECTED');\n      this.setState({\n        connectBtnDisabled: false,\n        disconnectBtnDisabled: true,\n        sendBtnDisabled: true,\n        disconnectIsLoading: false,\n      });\n    };\n    this.ws.onmessage = event => {\n      this.addLog('Received: ' + event.data);\n    };\n    this.ws.onerror = event => {\n      this.addLog('Error: ' + event.data);\n    };\n  }\n\n  connect() {\n    this.setState({\n      connectIsLoading: true,\n    });\n    this.ws = new WebSocket(this.state.WSURL);\n    this.socketHandle();\n  }\n\n  disconnect() {\n    this.setState({\n      disconnectIsLoading: true,\n    });\n    this.ws.close();\n  }\n\n  sendMsg(msg) {\n    const txt = msg ? msg : this.state.message;\n    if (txt.trim()) {\n      this.ws.send(txt);\n      this.addLog(`Emitted: ${txt}`);\n    }\n  }\n\n  addLog(txt) {\n    this.setState({\n      logs: `${this.state.logs ? `${this.state.logs}\\r\\n> ${txt}` : `> ${txt}`}`,\n    });\n  }\n\n  clearLogs() {\n    this.setState({\n      logs: '> Console cleared',\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <section className=\"hero\">\n          <div className=\"hero-body\">\n            <div className=\"container\">\n              <h1 className=\"title\">WebSocket</h1>\n              <h2 className=\"subtitle\">To test websocket!</h2>\n              <CommonInput\n                label=\"WSURL\"\n                placeholder=\"WSURL\"\n                value={this.state.WSURL}\n                onInputChange={this.inputChangeHandle}\n              ></CommonInput>\n              <div className=\"field is-grouped\">\n                <ActionButton\n                  text=\"Connect\"\n                  disabled={this.state.connectBtnDisabled}\n                  isLoading={this.state.connectIsLoading}\n                  action={this.connect}\n                ></ActionButton>\n                <ActionButton\n                  text=\"Disconnect\"\n                  disabled={this.state.disconnectBtnDisabled}\n                  isLoading={this.state.disconnectIsLoading}\n                  action={this.disconnect}\n                ></ActionButton>\n              </div>\n\n              <div className=\"field\">\n                <label className=\"label\">Quick Msg:</label>\n                <div className=\"field is-grouped is-grouped-multiline\">\n                  <MsgButton\n                    btnClass=\"is-link\"\n                    value=\"Are you online\"\n                    receiveMsg={this.receiveMsgHandle}\n                  ></MsgButton>\n                  <MsgButton\n                    btnClass=\"is-info\"\n                    value=\"Please open url\"\n                    receiveMsg={this.receiveMsgHandle}\n                  ></MsgButton>\n                  <MsgButton\n                    btnClass=\"is-success\"\n                    value=\"Please get page info\"\n                    receiveMsg={this.receiveMsgHandle}\n                  ></MsgButton>\n                </div>\n              </div>\n\n              <CommonInput\n                label=\"Message\"\n                placeholder=\"Message\"\n                value={this.state.message}\n                onInputChange={this.inputChangeHandle}\n              ></CommonInput>\n\n              <div className=\"field is-grouped\">\n                <ActionButton\n                  text=\"Send\"\n                  btnClass=\"is-primary\"\n                  disabled={this.state.sendBtnDisabled}\n                  action={this.sendMsg}\n                ></ActionButton>\n              </div>\n\n              <div className=\"field\">\n                <label className=\"label\">Log:</label>\n                <div className=\"control\">\n                  <textarea\n                    className=\"textarea log is-info\"\n                    rows=\"10\"\n                    readOnly\n                    value={this.state.logs}\n                  ></textarea>\n                </div>\n              </div>\n\n              <div className=\"field is-grouped\">\n                <ActionButton\n                  text=\"Clear log\"\n                  disabled={false}\n                  action={this.clearLogs}\n                ></ActionButton>\n              </div>\n            </div>\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}